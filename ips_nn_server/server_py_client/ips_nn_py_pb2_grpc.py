# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import ips_nn_py_pb2 as ips__nn__py__pb2


class ExchangerStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.putData2nn = channel.unary_unary(
                '/ips_data_exchange.Exchanger/putData2nn',
                request_serializer=ips__nn__py__pb2.data2nn.SerializeToString,
                response_deserializer=ips__nn__py__pb2.response2client.FromString,
                )


class ExchangerServicer(object):
    """Missing associated documentation comment in .proto file"""

    def putData2nn(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExchangerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'putData2nn': grpc.unary_unary_rpc_method_handler(
                    servicer.putData2nn,
                    request_deserializer=ips__nn__py__pb2.data2nn.FromString,
                    response_serializer=ips__nn__py__pb2.response2client.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ips_data_exchange.Exchanger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Exchanger(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def putData2nn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ips_data_exchange.Exchanger/putData2nn',
            ips__nn__py__pb2.data2nn.SerializeToString,
            ips__nn__py__pb2.response2client.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class PutterStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.putData2DB = channel.unary_unary(
                '/ips_data_exchange.Putter/putData2DB',
                request_serializer=ips__nn__py__pb2.nn2db.SerializeToString,
                response_deserializer=ips__nn__py__pb2.response2client.FromString,
                )


class PutterServicer(object):
    """Missing associated documentation comment in .proto file"""

    def putData2DB(self, request, context):
        """Sends data to DB
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PutterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'putData2DB': grpc.unary_unary_rpc_method_handler(
                    servicer.putData2DB,
                    request_deserializer=ips__nn__py__pb2.nn2db.FromString,
                    response_serializer=ips__nn__py__pb2.response2client.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ips_data_exchange.Putter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Putter(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def putData2DB(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ips_data_exchange.Putter/putData2DB',
            ips__nn__py__pb2.nn2db.SerializeToString,
            ips__nn__py__pb2.response2client.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
